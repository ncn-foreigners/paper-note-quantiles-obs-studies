---
title: "Simulation for the covariate balancing propensity score (CBPS)"
author: "Maciej BerÄ™sewicz"
format: 
  html:
    self-contained: true
    table-of-contents: true
    number-sections: true
    df-print: kable
editor: source
execute: 
  eval: false
  warning: false
  message: false
toc-title: Contents
lang: en
---

# Load packages

Load required packages
```{r}
library(nonprobsvy)
library(jointCalib)
library(IPS)
library(CBPS)
library(glue)
library(data.table)
```

Functions taken from [Sant'Anna et al. (2022)](https://onlinelibrary.wiley.com/doi/10.1002/jae.2909) paper.

```{r}
source("functions.R")
```

# Simulations

Simulation 1 -- correctly specified model

```{r}
reps <- 500
n_sample <- 1000
est <- 11
results <- matrix(0, nrow = reps, ncol = est)
results_qte <- matrix(0, nrow = reps, ncol = est*5)
results_ks <- matrix(0, nrow = reps, ncol = est)
results_cvm <- matrix(0, nrow = reps, ncol = est)
colnames(results_cvm) <- colnames(results_ks) <- colnames(results) <- c("IPS (ind)",  "IPS (exp)", "IPS (proj)", 
                                                                      "CPBS (e)", "CBPS (o)",
                                                                      "CBPS (e MQ)", "CBPS (o MQ)", 
                                                                      "CBPS (e MP)",  "CBPS (o MP)",
                                                                      "CPBS (e P)", "CPBS (o P)")
probs1 <- seq(0.25, 0.75, 0.25)
probs2 <- seq(0.1, 0.9, 0.1)
tau <- c(0.10, 0.25, 0.5, 0.75, 0.9)
bw <- "nrd0" 

for (i in 1:reps) {
  set.seed(2023 + i)
  if (i %% 5 == 0) print(i)
  data_sim1 <- cbps_sim_data(n = n_sample, dgp=1)
  xcov <- cbind(1, data_sim1[, c("X1", "X2", "X3", "X4")])
  
  ## cbps - exact
  
  fit.cbps <- CBPS::CBPS(formula = Treat ~ X1 + X2 + X3 + X4,
                         data = data_sim1,
                         ATT = 0,
                         twostep = T, standardize = F, method = "exact")
  cbps.lin.rep <- inflc_cbps(data_sim1$Treat, xcov,
                             fit.cbps$fitted.values, method = "exact")
  ate_cbps <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       fit.cbps$fitted.values, cbps.lin.rep)
  
  suppressWarnings(qte_cbps <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       fit.cbps$fitted.values,
                       cbps.lin.rep, tau, bw = bw))
  
  ## cbps - over
  
  fit.cbps_o <- CBPS::CBPS(formula = Treat ~ X1 + X2 + X3 + X4,
                         data = data_sim1,
                         ATT = 0,
                         twostep = T, standardize = F, method = "over")
  cbps.lin.rep_o <- inflc_cbps(data_sim1$Treat, xcov,
                             fit.cbps_o$fitted.values, method = "over")
  
  ate_cbps_o <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       fit.cbps_o$fitted.values, cbps.lin.rep_o)
  
  suppressWarnings(qte_cbps_o <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                                          fit.cbps_o$fitted.values,
                                          cbps.lin.rep_o, tau, bw = bw))
  ## ind
   fit.ind <- IPS::IPS_ind(d = data_sim1$Treat,
                          x = xcov,
                          beta.initial = fit.cbps$coefficients, maxit = 25000)
  
  ate_IPS_ind <- IPS::ATE(data_sim1$Y, 
                          data_sim1$Treat, 
                          xcov, 
                          fit.ind$fitted.values, 
                          fit.ind$lin.rep)
  
  
  suppressWarnings(qte_IPS_ind <- IPS::QTE(data_sim1$Y, 
                                           data_sim1$Treat, xcov, 
                                           fit.ind$fitted.values,
                                           fit.ind$lin.rep, tau, bw = bw))
  
  ## exp 
  fit.exp <- IPS::IPS_exp(d = data_sim1$Treat,
                          x = xcov,
                          beta.initial = fit.cbps$coefficients, maxit = 25000)
  
  ate_IPS_exp <- IPS::ATE(data_sim1$Y, 
                          data_sim1$Treat, 
                          xcov, 
                          fit.exp$fitted.values, 
                          fit.exp$lin.rep)
  
  
  suppressWarnings(qte_IPS_exp <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov, fit.exp$fitted.values,
                          fit.exp$lin.rep, tau, bw = bw))
  
  ## proj 
  fit.proj <- IPS::IPS_proj(d = data_sim1$Treat,
                          x = xcov,
                          beta.initial = fit.cbps$coefficients, maxit = 25000)
  
  ate_IPS_proj <- IPS::ATE(data_sim1$Y, 
                          data_sim1$Treat, 
                          xcov, 
                          fit.proj$fitted.values, 
                          fit.proj$lin.rep)
  
  
  suppressWarnings(qte_IPS_proj <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov, fit.proj$fitted.values,
                          fit.proj$lin.rep, tau, bw = bw))
  
  ## for quantiles
  res2 <- joint_calib_cbps(formula_quantiles =  ~ X1 + X2 + X3 + X4,
                           formula_means = ~ X1 + X2 + X3 + X4,
                           treatment = ~ Treat, 
                           data = data_sim1,
                           standardize = F, method = "exact")
  cbps.lin.rep <- inflc_cbps(data_sim1$Treat, xcov,
                             res2$fitted.values, method = "exact")
  ate_cbps2 <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       res2$fitted.values, cbps.lin.rep)
  suppressWarnings(qte_cbps2 <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       res2$fitted.values,
                       cbps.lin.rep, tau, bw = bw))
  
  res2_o <- joint_calib_cbps(formula_quantiles =  ~ X1 + X2 + X3 + X4,
                           formula_means = ~ X1 + X2 + X3 + X4,
                           treatment = ~ Treat, 
                           data = data_sim1,
                           standardize = F, method = "over")
  cbps.lin.rep_o <- inflc_cbps(data_sim1$Treat, xcov,
                             res2_o$fitted.values, method = "over")
  ate_cbps2_o <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       res2$fitted.values, cbps.lin.rep_o)
  suppressWarnings(qte_cbps2_o <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       res2_o$fitted.values,
                       cbps.lin.rep_o, tau, bw = bw))
  
  ## for other percentiles

  res3 <- joint_calib_cbps(formula_quantiles =  ~ X1 + X2 + X3 + X4,
                           formula_means = ~ X1 + X2 + X3 + X4,
                           treatment = ~ Treat, 
                           data = data_sim1,
                           probs = probs2,
                           standardize = F, method = "exact")
  cbps.lin.rep <- inflc_cbps(data_sim1$Treat, xcov,
                             res3$fitted.values, method = "exact")
  ate_cbps3 <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       res3$fitted.values, cbps.lin.rep)
  suppressWarnings(qte_cbps3 <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       res3$fitted.values,
                       cbps.lin.rep, tau, bw = bw))
  
  ## for other percentiles - over

  res3_o <- joint_calib_cbps(formula_quantiles =  ~ X1 + X2 + X3 + X4,
                           formula_means = ~ X1 + X2 + X3 + X4,
                           treatment = ~ Treat, 
                           data = data_sim1,
                           probs = probs2,
                           standardize = F, method = "over")
  cbps.lin.rep_o <- inflc_cbps(data_sim1$Treat, xcov,
                             res3_o$fitted.values, method = "over")
  ate_cbps3_o <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       res3_o$fitted.values, cbps.lin.rep_o)
  suppressWarnings(qte_cbps3_o <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       res3_o$fitted.values,
                       cbps.lin.rep_o, tau, bw = bw))
  
  ## percentiles only
  res4 <- joint_calib_cbps(formula_quantiles =  ~ X1 + X2 + X3 + X4,
                           #formula_means = ~ X1 + X2 + X3 + X4,
                           treatment = ~ Treat, 
                           data = data_sim1,
                           probs = probs2,
                           standardize = F, method = "exact")
  cbps.lin.rep <- inflc_cbps(data_sim1$Treat, xcov,
                             res4$fitted.values, method = "exact")
  ate_cbps4 <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       res4$fitted.values, cbps.lin.rep)
  suppressWarnings(qte_cbps4 <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       res4$fitted.values,
                       cbps.lin.rep, tau, bw = bw))
  ## percentiles only - over
  res4_o <- joint_calib_cbps(formula_quantiles =  ~ X1 + X2 + X3 + X4,
                           #formula_means = ~ X1 + X2 + X3 + X4,
                           treatment = ~ Treat, 
                           data = data_sim1,
                           probs = probs2,
                           standardize = F, method = "over")
  cbps.lin.rep_o <- inflc_cbps(data_sim1$Treat, xcov,
                             res4_o$fitted.values, method = "exact")
  ate_cbps4_o <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       res4_o$fitted.values, cbps.lin.rep_o)
  suppressWarnings(qte_cbps4_o <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       res4_o$fitted.values,
                       cbps.lin.rep_o, tau, bw = bw))
  
  ## est
  
  w_1 <- data_sim1$Treat/fit.cbps$fitted.values
  w_1 <- w_1/mean(w_1)
  w_0 <- (1-data_sim1$Treat)/(1-fit.cbps$fitted.values)
  w_0 <- w_0/mean(w_0)
  w_cbps <- w_1-w_0
  
  w_1_o <- data_sim1$Treat/fit.cbps_o$fitted.values
  w_1_o <- w_1_o/mean(w_1_o)
  w_0_o <- (1-data_sim1$Treat)/(1-fit.cbps_o$fitted.values)
  w_0_o <- w_0_o/mean(w_0_o)
  w_cbps_o <- w_1_o-w_0_o
  
  w_1a <- data_sim1$Treat/res2$fitted.values
  w_1a <- w_1a/mean(w_1a)
  w_0a <- (1-data_sim1$Treat)/(1-res2$fitted.values)
  w_0a <- w_0a/mean(w_0a)
  w_cbps_a <- w_1a-w_0a
  
  w_1a_o <- data_sim1$Treat/res2_o$fitted.values
  w_1a_o <- w_1a_o/mean(w_1a_o)
  w_0a_o <- (1-data_sim1$Treat)/(1-res2_o$fitted.values)
  w_0a_o <- w_0a_o/mean(w_0a_o)
  w_cbps_a_o <- w_1a_o-w_0a_o
  
  w_1b <- data_sim1$Treat/res3$fitted.values
  w_1b <- w_1b/mean(w_1b)
  w_0b <- (1-data_sim1$Treat)/(1-res3$fitted.values)
  w_0b <- w_0b/mean(w_0b)
  w_cbps_b <- w_1b-w_0b
  
  w_1b_o <- data_sim1$Treat/res3_o$fitted.values
  w_1b_o <- w_1b_o/mean(w_1b_o)
  w_0b_o <- (1-data_sim1$Treat)/(1-res3_o$fitted.values)
  w_0b_o <- w_0b_o/mean(w_0b_o)
  w_cbps_b_o <- w_1b_o-w_0b_o
  
  w_1c <- data_sim1$Treat/res4$fitted.values
  w_1c <- w_1c/mean(w_1c)
  w_0c <- (1-data_sim1$Treat)/(1-res4$fitted.values)
  w_0c <- w_0c/mean(w_0c)
  w_cbps_c <- w_1c-w_0c
  
  w_1c_o <- data_sim1$Treat/res4_o$fitted.values
  w_1c_o <- w_1c_o/mean(w_1c_o)
  w_0c_o <- (1-data_sim1$Treat)/(1-res4_o$fitted.values)
  w_0c_o <- w_0c_o/mean(w_0c_o)
  w_cbps_c_o <- w_1c_o-w_0c_o
  
  w_ind1 <- data_sim1$Treat/fit.ind$fitted.values
  w_ind0 <- (1-data_sim1$Treat)/(1 - fit.ind$fitted.values)
  w_ind1 <- w_ind1/mean(w_ind1)
  w_ind0 <- w_ind0/mean(w_ind0)
  w_ind_ate <- w_ind1 - w_ind0
  
  w_exp1 <- data_sim1$Treat/fit.exp$fitted.values
  w_exp0 <- (1-data_sim1$Treat)/(1 - fit.exp$fitted.values)
  w_exp1 <- w_exp1/mean(w_exp1)
  w_exp0 <- w_exp0/mean(w_exp0)
  w_exp_ate <- w_exp1 - w_exp0
  
  w_proj1 <- data_sim1$Treat/fit.proj$fitted.values
  w_proj0 <- (1-data_sim1$Treat)/(1 - fit.proj$fitted.values)
  w_proj1 <- w_proj1/mean(w_proj1)
  w_proj0 <- w_proj0/mean(w_proj0)
  w_proj_ate <- w_proj1 - w_proj0
  
  
  ## distance
  k_dim <- NCOL(xcov)

  indicators <- base::outer(xcov[,1], xcov[,1], "<=")
  for ( bb in 2:k_dim){
    indicators <- indicators *
      base::outer(xcov[, bb], xcov[, bb], "<=")
  }
  
  cdf_balance_cbps <- abs(base::colMeans(w_cbps * indicators))
  cdf_balance_cbps_o <- abs(base::colMeans(w_cbps_o * indicators))
  cdf_balance_cbps_a <- abs(base::colMeans(w_cbps_a * indicators))
  cdf_balance_cbps_a_o <- abs(base::colMeans(w_cbps_a_o * indicators))
  cdf_balance_cbps_b <- abs(base::colMeans(w_cbps_b * indicators))
  cdf_balance_cbps_b_o <- abs(base::colMeans(w_cbps_b_o * indicators))
  cdf_balance_cbps_c <- abs(base::colMeans(w_cbps_c * indicators))
  cdf_balance_cbps_c_o <- abs(base::colMeans(w_cbps_c_o * indicators))
  cdf_balance_ind <- abs(base::colMeans(w_ind_ate * indicators))
  cdf_balance_exp <- abs(base::colMeans(w_exp_ate * indicators))
  cdf_balance_proj <- abs(base::colMeans(w_proj_ate * indicators))
  
  ks_tests <- sqrt(n_sample) * c(
    max(cdf_balance_ind), max(cdf_balance_exp), max(cdf_balance_proj), 
    max(cdf_balance_cbps), max(cdf_balance_cbps_o), 
    max(cdf_balance_cbps_a), max(cdf_balance_cbps_a_o), 
    max(cdf_balance_cbps_b), max(cdf_balance_cbps_b_o), 
    max(cdf_balance_cbps_c), max(cdf_balance_cbps_c_o)
  )
  
  cvm_tests <- c(
    sum(cdf_balance_ind^2), sum(cdf_balance_exp^2), sum(cdf_balance_proj^2), 
    sum(cdf_balance_cbps^2), sum(cdf_balance_cbps_o^2), 
    sum(cdf_balance_cbps_a^2), sum(cdf_balance_cbps_a_o^2), 
    sum(cdf_balance_cbps_b^2), sum(cdf_balance_cbps_b_o^2), 
    sum(cdf_balance_cbps_c^2), sum(cdf_balance_cbps_c_o^2)
  )
  
  results[i, ] <- c(ate_IPS_ind$ate,
                    ate_IPS_exp$ate,
                    ate_IPS_proj$ate,
                   ate_cbps$ate, ate_cbps_o$ate, 
                   ate_cbps2$ate, ate_cbps2_o$ate,
                   ate_cbps3$ate, ate_cbps3_o$ate,
                   ate_cbps4$ate, ate_cbps4_o$ate)
  results_qte[i, ] <- c(qte_IPS_ind$qte,
                        qte_IPS_exp$qte,
                        qte_IPS_proj$qte,
                       qte_cbps$qte, qte_cbps_o$qte,
                       qte_cbps2$qte, qte_cbps2_o$qte,
                       qte_cbps3$qte, qte_cbps3_o$qte,
                       qte_cbps4$qte, qte_cbps4_o$qte)
  
  results_cvm[i, ] <- cvm_tests
  results_ks[i, ] <- ks_tests
}

```


Simulation 2 -- mis-specified model


```{r}
results2 <- matrix(0, nrow = reps, ncol = est)
results2_qte <- matrix(0, nrow = reps, ncol = est*5)
results2_ks <- matrix(0, nrow = reps, ncol = est)
results2_cvm <- matrix(0, nrow = reps, ncol = est)
colnames(results2_cvm) <- colnames(results2_ks) <- colnames(results2) <- c("IPS (ind)",  "IPS (exp)", "IPS (proj)", 
                                                                      "CPBS (e)", "CBPS (o)",
                                                                      "CBPS (e MQ)", "CBPS (o MQ)", 
                                                                      "CBPS (e MP)",  "CBPS (o MP)",
                                                                      "CPBS (e P)", "CPBS (o P)")

for (i in 1:reps) {
  set.seed(2023 + i)
  if (i %% 5 == 0) print(i)
  data_sim1 <- cbps_sim_data(n = n_sample, dgp=2)
  xcov <- cbind(1, data_sim1[, c("X1", "X2", "X3", "X4")])
  
  ## cbps - exact
  
  fit.cbps <- CBPS::CBPS(formula = Treat ~ X1 + X2 + X3 + X4,
                         data = data_sim1,
                         ATT = 0,
                         twostep = T, standardize = F, method = "exact")
  cbps.lin.rep <- inflc_cbps(data_sim1$Treat, xcov,
                             fit.cbps$fitted.values, method = "exact")
  ate_cbps <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       fit.cbps$fitted.values, cbps.lin.rep)
  
  suppressWarnings(qte_cbps <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       fit.cbps$fitted.values,
                       cbps.lin.rep, tau, bw = bw))
  
  ## cbps - over
  
  fit.cbps_o <- CBPS::CBPS(formula = Treat ~ X1 + X2 + X3 + X4,
                         data = data_sim1,
                         ATT = 0,
                         twostep = T, standardize = F, method = "over")
  cbps.lin.rep_o <- inflc_cbps(data_sim1$Treat, xcov,
                             fit.cbps_o$fitted.values, method = "over")
  
  ate_cbps_o <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       fit.cbps_o$fitted.values, cbps.lin.rep_o)
  
  suppressWarnings(qte_cbps_o <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                                          fit.cbps_o$fitted.values,
                                          cbps.lin.rep_o, tau, bw = bw))
  ## ind
   fit.ind <- IPS::IPS_ind(d = data_sim1$Treat,
                          x = xcov,
                          beta.initial = fit.cbps$coefficients, maxit = 25000)
  
  ate_IPS_ind <- IPS::ATE(data_sim1$Y, 
                          data_sim1$Treat, 
                          xcov, 
                          fit.ind$fitted.values, 
                          fit.ind$lin.rep)
  
  
  suppressWarnings(qte_IPS_ind <- IPS::QTE(data_sim1$Y, 
                                           data_sim1$Treat, xcov, 
                                           fit.ind$fitted.values,
                                           fit.ind$lin.rep, tau, bw = bw))
  
  ## exp 
  fit.exp <- IPS::IPS_exp(d = data_sim1$Treat,
                          x = xcov,
                          beta.initial = fit.cbps$coefficients, maxit = 25000)
  
  ate_IPS_exp <- IPS::ATE(data_sim1$Y, 
                          data_sim1$Treat, 
                          xcov, 
                          fit.exp$fitted.values, 
                          fit.exp$lin.rep)
  
  
  suppressWarnings(qte_IPS_exp <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov, fit.exp$fitted.values,
                                           fit.exp$lin.rep, tau, bw = bw))
  
  ## proj 
  fit.proj <- IPS::IPS_proj(d = data_sim1$Treat,
                          x = xcov,
                          beta.initial = fit.cbps$coefficients, maxit = 25000)
  
  ate_IPS_proj <- IPS::ATE(data_sim1$Y, 
                          data_sim1$Treat, 
                          xcov, 
                          fit.proj$fitted.values, 
                          fit.proj$lin.rep)
  
  
  suppressWarnings(qte_IPS_proj <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov, fit.proj$fitted.values,
                          fit.proj$lin.rep, tau, bw = bw))
  
  ## for quantiles
  res2 <- joint_calib_cbps(formula_quantiles =  ~ X1 + X2 + X3 + X4,
                           formula_means = ~ X1 + X2 + X3 + X4,
                           treatment = ~ Treat, 
                           data = data_sim1,
                           standardize = F, method = "exact")
  cbps.lin.rep <- inflc_cbps(data_sim1$Treat, xcov,
                             res2$fitted.values, method = "exact")
  ate_cbps2 <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       res2$fitted.values, cbps.lin.rep)
  suppressWarnings(qte_cbps2 <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       res2$fitted.values,
                       cbps.lin.rep, tau, bw = bw))
  
  res2_o <- joint_calib_cbps(formula_quantiles =  ~ X1 + X2 + X3 + X4,
                           formula_means = ~ X1 + X2 + X3 + X4,
                           treatment = ~ Treat, 
                           data = data_sim1,
                           standardize = F, method = "over")
  cbps.lin.rep_o <- inflc_cbps(data_sim1$Treat, xcov,
                             res2_o$fitted.values, method = "over")
  ate_cbps2_o <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       res2$fitted.values, cbps.lin.rep_o)
  suppressWarnings(qte_cbps2_o <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       res2_o$fitted.values,
                       cbps.lin.rep_o, tau, bw = bw))
  
  ## for other percentiles

  res3 <- joint_calib_cbps(formula_quantiles =  ~ X1 + X2 + X3 + X4,
                           formula_means = ~ X1 + X2 + X3 + X4,
                           treatment = ~ Treat, 
                           data = data_sim1,
                           probs = probs2,
                           standardize = F, method = "exact")
  cbps.lin.rep <- inflc_cbps(data_sim1$Treat, xcov,
                             res3$fitted.values, method = "exact")
  ate_cbps3 <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       res3$fitted.values, cbps.lin.rep)
  suppressWarnings(qte_cbps3 <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       res3$fitted.values,
                       cbps.lin.rep, tau, bw = bw))
  
  ## for other percentiles - over

  res3_o <- joint_calib_cbps(formula_quantiles =  ~ X1 + X2 + X3 + X4,
                           formula_means = ~ X1 + X2 + X3 + X4,
                           treatment = ~ Treat, 
                           data = data_sim1,
                           probs = probs2,
                           standardize = F, method = "over")
  cbps.lin.rep_o <- inflc_cbps(data_sim1$Treat, xcov,
                             res3_o$fitted.values, method = "over")
  ate_cbps3_o <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       res3_o$fitted.values, cbps.lin.rep_o)
  suppressWarnings(qte_cbps3_o <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       res3_o$fitted.values,
                       cbps.lin.rep_o, tau, bw = bw))
  
  ## percentiles only
  res4 <- joint_calib_cbps(formula_quantiles =  ~ X1 + X2 + X3 + X4,
                           #formula_means = ~ X1 + X2 + X3 + X4,
                           treatment = ~ Treat, 
                           data = data_sim1,
                           probs = probs2,
                           standardize = F, method = "exact")
  cbps.lin.rep <- inflc_cbps(data_sim1$Treat, xcov,
                             res4$fitted.values, method = "exact")
  ate_cbps4 <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       res4$fitted.values, cbps.lin.rep)
  suppressWarnings(qte_cbps4 <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       res4$fitted.values,
                       cbps.lin.rep, tau, bw = bw))
  ## percentiles only - over
  res4_o <- joint_calib_cbps(formula_quantiles =  ~ X1 + X2 + X3 + X4,
                           #formula_means = ~ X1 + X2 + X3 + X4,
                           treatment = ~ Treat, 
                           data = data_sim1,
                           probs = probs2,
                           standardize = F, method = "over")
  cbps.lin.rep_o <- inflc_cbps(data_sim1$Treat, xcov,
                             res4_o$fitted.values, method = "exact")
  ate_cbps4_o <- IPS::ATE(data_sim1$Y, data_sim1$Treat, xcov, 
                       res4_o$fitted.values, cbps.lin.rep_o)
  suppressWarnings(qte_cbps4_o <- IPS::QTE(data_sim1$Y, data_sim1$Treat, xcov,
                       res4_o$fitted.values,
                       cbps.lin.rep_o, tau, bw = bw))
  
  ## est
  
  w_1 <- data_sim1$Treat/fit.cbps$fitted.values
  w_1 <- w_1/mean(w_1)
  w_0 <- (1-data_sim1$Treat)/(1-fit.cbps$fitted.values)
  w_0 <- w_0/mean(w_0)
  w_cbps <- w_1-w_0
  
  w_1_o <- data_sim1$Treat/fit.cbps_o$fitted.values
  w_1_o <- w_1_o/mean(w_1_o)
  w_0_o <- (1-data_sim1$Treat)/(1-fit.cbps_o$fitted.values)
  w_0_o <- w_0_o/mean(w_0_o)
  w_cbps_o <- w_1_o-w_0_o
  
  w_1a <- data_sim1$Treat/res2$fitted.values
  w_1a <- w_1a/mean(w_1a)
  w_0a <- (1-data_sim1$Treat)/(1-res2$fitted.values)
  w_0a <- w_0a/mean(w_0a)
  w_cbps_a <- w_1a-w_0a
  
  w_1a_o <- data_sim1$Treat/res2_o$fitted.values
  w_1a_o <- w_1a_o/mean(w_1a_o)
  w_0a_o <- (1-data_sim1$Treat)/(1-res2_o$fitted.values)
  w_0a_o <- w_0a_o/mean(w_0a_o)
  w_cbps_a_o <- w_1a_o-w_0a_o
  
  w_1b <- data_sim1$Treat/res3$fitted.values
  w_1b <- w_1b/mean(w_1b)
  w_0b <- (1-data_sim1$Treat)/(1-res3$fitted.values)
  w_0b <- w_0b/mean(w_0b)
  w_cbps_b <- w_1b-w_0b
  
  w_1b_o <- data_sim1$Treat/res3_o$fitted.values
  w_1b_o <- w_1b_o/mean(w_1b_o)
  w_0b_o <- (1-data_sim1$Treat)/(1-res3_o$fitted.values)
  w_0b_o <- w_0b_o/mean(w_0b_o)
  w_cbps_b_o <- w_1b_o-w_0b_o
  
  w_1c <- data_sim1$Treat/res4$fitted.values
  w_1c <- w_1c/mean(w_1c)
  w_0c <- (1-data_sim1$Treat)/(1-res4$fitted.values)
  w_0c <- w_0c/mean(w_0c)
  w_cbps_c <- w_1c-w_0c
  
  w_1c_o <- data_sim1$Treat/res4_o$fitted.values
  w_1c_o <- w_1c_o/mean(w_1c_o)
  w_0c_o <- (1-data_sim1$Treat)/(1-res4_o$fitted.values)
  w_0c_o <- w_0c_o/mean(w_0c_o)
  w_cbps_c_o <- w_1c_o-w_0c_o
  
  w_ind1 <- data_sim1$Treat/fit.ind$fitted.values
  w_ind0 <- (1-data_sim1$Treat)/(1 - fit.ind$fitted.values)
  w_ind1 <- w_ind1/mean(w_ind1)
  w_ind0 <- w_ind0/mean(w_ind0)
  w_ind_ate <- w_ind1 - w_ind0
  
  w_exp1 <- data_sim1$Treat/fit.exp$fitted.values
  w_exp0 <- (1-data_sim1$Treat)/(1 - fit.exp$fitted.values)
  w_exp1 <- w_exp1/mean(w_exp1)
  w_exp0 <- w_exp0/mean(w_exp0)
  w_exp_ate <- w_exp1 - w_exp0
  
  w_proj1 <- data_sim1$Treat/fit.proj$fitted.values
  w_proj0 <- (1-data_sim1$Treat)/(1 - fit.proj$fitted.values)
  w_proj1 <- w_proj1/mean(w_proj1)
  w_proj0 <- w_proj0/mean(w_proj0)
  w_proj_ate <- w_proj1 - w_proj0
  
  
  ## distance
  k_dim <- NCOL(xcov)

  indicators <- base::outer(xcov[,1], xcov[,1], "<=")
  for ( bb in 2:k_dim){
    indicators <- indicators *
      base::outer(xcov[, bb], xcov[, bb], "<=")
  }
  
  cdf_balance_cbps <- abs(base::colMeans(w_cbps * indicators))
  cdf_balance_cbps_o <- abs(base::colMeans(w_cbps_o * indicators))
  cdf_balance_cbps_a <- abs(base::colMeans(w_cbps_a * indicators))
  cdf_balance_cbps_a_o <- abs(base::colMeans(w_cbps_a_o * indicators))
  cdf_balance_cbps_b <- abs(base::colMeans(w_cbps_b * indicators))
  cdf_balance_cbps_b_o <- abs(base::colMeans(w_cbps_b_o * indicators))
  cdf_balance_cbps_c <- abs(base::colMeans(w_cbps_c * indicators))
  cdf_balance_cbps_c_o <- abs(base::colMeans(w_cbps_c_o * indicators))
  cdf_balance_ind <- abs(base::colMeans(w_ind_ate * indicators))
  cdf_balance_exp <- abs(base::colMeans(w_exp_ate * indicators))
  cdf_balance_proj <- abs(base::colMeans(w_proj_ate * indicators))
  
  ks_tests <- sqrt(n_sample) * c(
    max(cdf_balance_ind), max(cdf_balance_exp), max(cdf_balance_proj), 
    max(cdf_balance_cbps), max(cdf_balance_cbps_o), 
    max(cdf_balance_cbps_a), max(cdf_balance_cbps_a_o), 
    max(cdf_balance_cbps_b), max(cdf_balance_cbps_b_o), 
    max(cdf_balance_cbps_c), max(cdf_balance_cbps_c_o)
  )
  
  cvm_tests <- c(
    sum(cdf_balance_ind^2), sum(cdf_balance_exp^2), sum(cdf_balance_proj^2), 
    sum(cdf_balance_cbps^2), sum(cdf_balance_cbps_o^2), 
    sum(cdf_balance_cbps_a^2), sum(cdf_balance_cbps_a_o^2), 
    sum(cdf_balance_cbps_b^2), sum(cdf_balance_cbps_b_o^2), 
    sum(cdf_balance_cbps_c^2), sum(cdf_balance_cbps_c_o^2)
  )
  
  results2[i, ] <- c(ate_IPS_ind$ate,
                    ate_IPS_exp$ate,
                    ate_IPS_proj$ate,
                   ate_cbps$ate, ate_cbps_o$ate, 
                   ate_cbps2$ate, ate_cbps2_o$ate,
                   ate_cbps3$ate, ate_cbps3_o$ate,
                   ate_cbps4$ate, ate_cbps4_o$ate)
  results2_qte[i, ] <- c(qte_IPS_ind$qte,
                       qte_IPS_exp$qte,
                       qte_IPS_proj$qte,
                       qte_cbps$qte, qte_cbps_o$qte,
                       qte_cbps2$qte, qte_cbps2_o$qte,
                       qte_cbps3$qte, qte_cbps3_o$qte,
                       qte_cbps4$qte, qte_cbps4_o$qte)
  
  results2_cvm[i, ] <- cvm_tests
  results2_ks[i, ] <- ks_tests
}
```


Processing results

```{r}
## processing results  - 1

results_qte_df <- results_qte |> as.data.frame()
names(results_qte_df) <- paste0(rep(colnames(results), 
                                  each = 5), "_", 1:5)

setDT(results_qte_df)
results_qte_df[, id:=1:reps]
results_qte_df <- melt(results_qte_df, id.vars = "id")
results_qte_df[, c("est", "quant") := tstrsplit(variable, "_")]
results_qte_df[, est:=factor(est, colnames(results))]

## processing results  - 2

results2_qte_df <- results2_qte |> as.data.frame()
names(results2_qte_df) <- paste0(rep(colnames(results2), 
                                  each = 5), "_", 1:5)

setDT(results2_qte_df)
results2_qte_df[, id:=1:reps]
results2_qte_df <- melt(results2_qte_df, id.vars = "id")
results2_qte_df[, c("est", "quant") := tstrsplit(variable, "_")]
results2_qte_df[, est:=factor(est, colnames(results2))]
```

Save results to RDS file

```{r}
sim1 <- list(ATE = cbind(id=1:reps,as.data.frame(results)),
             QTE = results_qte_df,
             CVM = cbind(id=1:reps,as.data.frame(results_cvm)),
             KS = cbind(id=1:reps,as.data.frame(results_ks)))

sim2 <- list(ATE = cbind(id=1:reps,as.data.frame(results2)),
             QTE = results2_qte_df,
             CVM = cbind(id=1:reps,as.data.frame(results2_cvm)),
             KS = cbind(id=1:reps,as.data.frame(results2_ks)))
```

```{r}
saveRDS(sim1, file = "../results/sim2-dgp1-1000.rds")
saveRDS(sim2, file = "../results/sim2-dgp2-1000.rds")
```

Save results to CSV

```{r}
fwrite(sim1$ATE, file = "../results/sim2-dgp1-1000-ate.csv")
fwrite(sim1$QTE, file = "../results/sim2-dgp1-1000-qte.csv")
fwrite(sim1$CVM, file = "../results/sim2-dgp1-1000-cvm.csv")
fwrite(sim1$KS,  file = "../results/sim2-dgp1-1000-ks.csv")

fwrite(sim2$ATE, file = "../results/sim2-dgp2-1000-ate.csv")
fwrite(sim2$QTE, file = "../results/sim2-dgp2-1000-qte.csv")
fwrite(sim2$CVM, file = "../results/sim2-dgp2-1000-cvm.csv")
fwrite(sim2$KS,  file = "../results/sim2-dgp2-1000-ks.csv")

names_files1 <- list.files("../results", full.names = TRUE, pattern = "sim2-dgp1-1000-.+.csv")
zip(zipfile =  "../results/sim2-dgp1-1000.zip", files = names_files1)
names_files2 <- list.files("../results", full.names = TRUE, pattern = "sim2-dgp2-1000-.+.csv")
zip(zipfile =  "../results/sim2-dgp2-1000.zip", files = names_files2)

file.remove(c(names_files1, names_files2))
```


