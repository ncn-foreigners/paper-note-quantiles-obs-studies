---
title: "Untitled"
format: html
---

# Load packages

```{r}
library(jointCalib)
library(ebal)
library(MASS)
library(data.table)
library(ggplot2)
library(laeken)
```
```{r}
source("functions.R")
```

# Simulation from the paper

Generate data 

```{r}
set.seed(123)
N <- 2000 ## population size
n_t <- c(300, 600, 1500) ## treated units 
n_c1 <- n_t*1
n_c2 <- n_t*2
n_c3 <- n_t*5
epsilon1 <- rnorm(N, 0, 30)
epsilon2 <- rnorm(N, 0, 100)
epsilon3 <- rchisq(N, 5)
desired_mean <- 0.5
desired_var <- 67.6
current_mean <- mean(epsilon3)
current_var <- var(epsilon3)
epsilon3_scaled <- sqrt(desired_var / current_var) * (epsilon3 - current_mean) + desired_mean

x<-MASS::mvrnorm(n=N, 
                 mu = c(0,0,0), 
                 Sigma = matrix(c(2, 1, -1, 1, 1, -0.5, -1, -0.5, 1),3,3))
x1 <- x[,1]
x2 <- x[,2]
x3 <- x[,3]
x4 <- runif(N, -3, 3)
x5 <- rchisq(N, 1)
x6 <- rbinom(N, 1, 0.5)
d1 <- x1 +2*x2-2*x3-x4-0.5*x5+x6 + epsilon1
d2 <- x1 +2*x2-2*x3-x4-0.5*x5+x6 + epsilon2
d3 <- x1 +2*x2-2*x3-x4-0.5*x5+x6 + epsilon3_scaled
eta <- rnorm(N)
y1 <- x1 + x2 + x3 - x4 + x5 + x6 + eta 
y2 <- x1 + x2 + 0.2*x3*x4 - sqrt(x5) + eta
y3 <- (x1+x2+x3)^2 + eta

probs_perc <- seq(0.1,0.9,0.1)
probs_quar <- c(0.25,0.50,0.75)
vars <- paste0("x", 1:6)
data_sim <- data.frame(x1,x2,x3,x4,x5,x6, 
                       d1, 
                       d2,
                       d3, 
                       y1, y2, y3) |> 
  setDT() |> 
  melt(id.vars = c(vars, "y1", "y2", "y3"), value.name = "eta", variable.name = "design") |> 
  transform(design = as.numeric(design))


```

```{r}
res_patt <- list() 
for (b in 1:500) {
  set.seed(b)
  data_sim[, flag:=rbinom(nrow(data_sim), 1, prob = pnorm(eta))]
  res_patt[[b]] <- eb_sim(data = data_sim, type = 3)
}

res_patt_df <- rbindlist(res_patt, id = "iter")
res_patt_df[,est:=factor(est, c("naive", "eb", "qrak", "qeb", "qrak_only"))]
melt(res_patt_df, id.vars = c("iter", "est", "des"), value.var = "bias", variable.name = "y") |> 
  ggplot(data = _, aes(x = est, y = value)) +
  geom_jitter(alpha = 0.1) + 
  geom_violin(scale = "width", draw_quantiles = c(0.25,0.5,0.75)) +
  stat_summary(fun = mean, geom = "point", col = "red") + 
  facet_wrap(~y) +
  geom_hline(yintercept = 0, linetype= "dashed", color = "red")
```

```{r}
res_patt_df[, lapply(.SD, mean), est, .SDcols = patterns("y")]
res_patt_df[, lapply(.SD, function(x) sqrt(mean(x)^2 + var(x))), est, .SDcols = patterns("y")]
```

