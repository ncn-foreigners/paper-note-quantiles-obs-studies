---
title: "Simulation for the entropy balancing method"
author: "Maciej BerÄ™sewicz"
format: 
  html:
    self-contained: true
    table-of-contents: true
    number-sections: true
    df-print: kable
editor: source
execute: 
  eval: false
  warning: false
  message: false
toc-title: Contents
lang: en
---


# Load packages

Load required packages

```{r load-packages}
library(jointCalib)
library(ebal) 
library(kbal)  ## it takes a lot of time to perform 500 simulations
library(mvnfast)
library(data.table)
library(ggplot2)
library(laeken)
```

# Simulation from the paper

Generate data as described in the section 4. 

**WARNING** as I included `kbal` package for the simulation study it takes now about **5 days to finish the simulation**! If you want to replicate results without `kbal` comment out appropriate lines. In the simulation I did not use the parallel for loop (e.g. using `foreach` + `doFuture`) because the `kbal` package uses `RcppParallel` package that uses all available cores and I cannot change it to smaller number of cores (bug?). 

Without `kbal` simulation takes about 10 minutes.


```{r simulation-study}
n <- 2000 ## initial sample size
n_sample <- 1000 ## required sample size n_0=n_1=n (#n control = #n treatment)
mu <- c(0, 0, 0) 
Sigma <- matrix(c(2, 1, -1,
                  1, 1, -0.5,
                  -1,-0.5, 1), 
                nrow=3, 
                ncol=3)

B <- 500
tau <- c(0.10, 0.25, 0.5, 0.75, 0.9)
result_total <- list()

for (b in 1:B) {
  set.seed(b)
  if (b %% 50 == 0) print(b)
  x123 <- rmvn(n=n, mu=mu, sigma=Sigma)
  x1 <- x123[,1]
  x2 <- x123[,2]
  x3 <- x123[,3]
  x4 <- runif(n,-3,3)
  x5 <- rchisq(n,1)
  x6 <- rbinom(n,1,0.5)
  ep1 <- rnorm(n,0,30)
  ep2 <- rnorm(n,0,100)
  ep3 <- rchisq(n, 5)
  ep3 <- ((ep3 - mean(ep3)) / sd(ep3)) * sqrt(67.6) + 0.5
  d1 <- as.numeric((x1 + 2*x2 -2*x3 -x4 -0.5*x5 +x6 + ep1) > 0)
  d2 <- as.numeric((x1 + 2*x2 -2*x3 -x4 -0.5*x5 +x6 + ep2) > 0)
  d3 <- as.numeric((x1 + 2*x2 -2*x3 -x4 -0.5*x5 +x6 + ep3) > 0)
  eta <- rnorm(n)
  y1 <- x1 + x2 + x3 - x4 + x5 + x6 + eta
  y2 <- x1 + x2 + 0.2*x3*x4 - sqrt(x5) + eta
  y3 <- (x1 + x2 + x5)^2 + eta
  df <- data.frame(id =1:n, x1,x2,x3,x4,x5,x6,d1,d2,d3,y1,y2,y3) |> setDT()
  df_long <- melt(df, id.vars = c(1:7,11:13), value.name = "treatment", variable.name = "design")
  
  ## sample by 1000 from reach group
  df_long <- df_long[, .SD[sample(.N, n_sample, replace = T)], by = .(design, treatment)]
  y_results <- list()

  for (des in c("d1", "d2", "d3")) {
    df_long_des <- df_long[design == des]
    ebal_res <- ebalance(Treatment = df_long_des$treatment, 
                         X = model.matrix( ~ -1 + x1 + x2 + x3 + x4 + x5 + x6, df_long_des), 
                         print.level = -1)
    
    ## comment this to remove kbal result
    kbal_res <- kbal(allx = model.matrix( ~ -1 + x1 + x2 + x3 + x4 + x5 + x6, df_long_des),
                     b= 6,
                     mixed_data = TRUE,
                     cat_columns = "x6",
                     treatment = df_long_des$treatment,
                     fullSVD = TRUE,
                     printprogress = FALSE)
    ## comment this to remove kbal result
    
    mq1_res <- joint_calib_att(formula_means = ~ x1 + x2 + x3 + x4 + x5 + x6,
                               formula_quantiles = ~ x1 + x2 + x3 + x4 + x5,
                               treatment = ~ treatment,
                               data = as.data.frame(df_long_des),
                               method = "eb")
    mp1_res <- joint_calib_att(formula_means = ~ x1 + x2 + x3 + x4 + x5 + x6,
                               formula_quantiles = ~ x1 + x2 + x3 + x4 + x5,
                               treatment = ~ treatment,
                               data = as.data.frame(df_long_des),
                               probs = seq(0.1, 0.9, 0.1),
                               method = "eb") 
    
    df_long_des[treatment == 0, ":="(w_ebal=ebal_res$w, w_mq1=mq1_res$g, w_mp1=mp1_res$g)]
    df_long_des[treatment == 1, ":="(w_ebal=1,          w_mq1=1,         w_mp1=1)]
    
    ## comment this to remove kbal result
    df_long_des[, w_kbal := kbal_res$w]
    ## comment this to remove kbal result
    
    y1_res <- df_long_des[, lapply(.SD, 
                          FUN = function(x) weighted.mean(y1[treatment==1], x[treatment==1]) - weighted.mean(y1[treatment==0], x[treatment==0])), 
                         .SDcols = patterns("w_")][, ":="(var="y1", est="att", tau=NA)]
    y2_res <- df_long_des[, lapply(.SD, 
                          FUN = function(x) weighted.mean(y2[treatment==1], x[treatment==1]) - weighted.mean(y2[treatment==0], x[treatment==0])), 
                         .SDcols = patterns("w_")][, ":="(var="y2", est="att", tau=NA)]
    
    y3_res <- df_long_des[, lapply(.SD, 
                          FUN = function(x) weighted.mean(y3[treatment==1], x[treatment==1]) - weighted.mean(y3[treatment==0], x[treatment==0])), 
                         .SDcols = patterns("w_")][, ":="(var="y3", est="att", tau=NA)]
    
    y1_res_q <- df_long_des[, lapply(.SD, 
                          FUN = function(x) weightedQuantile(y1[treatment==1], x[treatment==1], tau) - 
                                            weightedQuantile(y1[treatment==0], x[treatment==0],tau)), 
                         .SDcols = patterns("w_")][, ":="(var="y1", est="qtt", tau=tau)]
    
    y2_res_q <- df_long_des[, lapply(.SD, 
                          FUN = function(x) weightedQuantile(y2[treatment==1], x[treatment==1], tau) - 
                                            weightedQuantile(y2[treatment==0], x[treatment==0],tau)), 
                         .SDcols = patterns("w_")][, ":="(var="y2", est="qtt", tau=tau)]
    
    y3_res_q <- df_long_des[, lapply(.SD, 
                          FUN = function(x) weightedQuantile(y3[treatment==1], x[treatment==1], tau) - 
                                            weightedQuantile(y3[treatment==0], x[treatment==0],tau)), 
                         .SDcols = patterns("w_")][, ":="(var="y3", est="qtt", tau=tau)]

    
    y_results[[des]] <- rbind(y1_res,y2_res,y3_res, y1_res_q, y2_res_q, y3_res_q)

  }

  result_total[[b]] <- rbindlist(y_results, idcol = "design")
  
}

```

Process data and save to `result_total_df` data.frame with names:

+ `b` - MC sample
+ `design` - design: d1, d2, d3
+ `var` - target: y1, y2, y3
+ `est` - causal parameter: att, qtt
+ `tau` - quantile: 0.1, 0.25, 0.50, 0.75, 0.90
+ `weight` - weight based on method: w_ebal, w_mq1, w_mp1
+ `value` - estimator value

```{r transform-results}
result_total_df <- rbindlist(result_total, idcol = "b") |> 
  melt(id.vars = c("b", 
                   "design", 
                   "var", 
                   "est", 
                   "tau"), 
       variable.name = "weight", value.name = "value")
```

Save results to RDS 

```{r save-to-rds}
saveRDS(result_total_df, 
        file = "../results/sim1-ebal.rds")
```

and to csv

```{r save-to-csv}
fwrite(x = result_total_df, file = "../results/sim1-ebal.csv")
```

