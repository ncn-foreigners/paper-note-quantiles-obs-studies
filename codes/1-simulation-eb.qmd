---
title: "Untitled"
format: html
---

```{r}
library(laeken)
library(survey)
library(ebal)
library(IPS)
library(spatstat.geom)
```


```{r}
source("functions.R")
```

Simple simulation - based on manual

```{r}
set.seed(2023-07-11)
n_0 <- 500
n_1 <- 300
treatment   <- c(rep(0,n_0), rep(1,n_1))
X <- rbind(
  sapply(1:3, FUN=function(x) rnorm(n_0, 0)),
  sapply(1:3, FUN=function(x) rnorm(n_1, .5))
)
X <- as.matrix(X)
colnames(X) <- paste("x",1:3,sep="")
head(X)
```

Simple simulation

```{r}
res <- calib_quantiles(
  X = X[treatment == 0, ],
  X_q = X[treatment == 0, ], 
  d = rep(1, n_0),
  N = n_1, 
  totals = colSums(X[treatment == 1, ]),
  totals_q = lapply(as.data.frame(X[treatment == 1, ]), 
                    FUN=quantile, probs = c(0.25, 0.5, 0.75)),
  backend = "sampling", 
  method = "raking"
)
```

```{r}
sapply(as.data.frame(X[treatment == 1, ]), FUN=quantile, probs = c(0.25, 0.5, 0.75))
```

```{r}
sapply(as.data.frame(X[treatment == 0, ]), FUN=quantile, 
       probs = c(0.25, 0.5, 0.75))

sapply(as.data.frame(X[treatment == 0, ]), FUN=weightedQuantile, 
       probs = c(0.25, 0.5, 0.75), weights = res$w)  

```
Deciles

```{r}
res_p <- calib_quantiles(
  X = X[treatment == 0, ], ## control X (for means)
  X_q = X[treatment == 0, ],  ## control X (for quantiles)
  d = rep(1, n_0), ## initial weight
  N = n_1,  ## size of treatment group
  totals = colSums(X[treatment == 1, ]), ## totals for treatment
  totals_q = lapply(as.data.frame(X[treatment == 1, ]),  
                    FUN=quantile, probs = seq(0.1, 0.9, 0.1)), ## quantiles for treatment
  backend = "laeken", 
  method = "logit",
  bounds = c(0, 10),
  tol = 1e-10
)
```

```{r}
perc_t <- sapply(as.data.frame(X[treatment == 1, ]), FUN=quantile, probs = seq(0.1, 0.9, 0.1))
```

```{r}
perc_c <- sapply(as.data.frame(X[treatment == 0, ]), 
                 FUN=weightedQuantile, 
                 probs = seq(0.1, 0.9, 0.1), 
                 weights = res_p$w) 

perc_t-perc_c
```
```{r}
colMeans(X[treatment == 1, ])
colSums(X[treatment == 0, ]*res_p$w) / sum(res_p$w)
```

```{r}
ips_eb <- IPS_exp(d = treatment, x = cbind(1, X))
ips_eb2 <- IPS_ind(d = treatment, x = cbind(1, X))
ips_eb3 <- IPS_proj(d = treatment, x = cbind(1, X))

colMeans(X[treatment == 1, ])
sapply(as.data.frame(X[treatment == 0, ]), FUN=weighted.mean, weights = ips_eb$fitted.values[treatment == 0]) 

perc_c2 <- sapply(as.data.frame(X[treatment == 0, ]), 
                  FUN=weightedQuantile, 
                  probs = seq(0.1, 0.9, 0.1),  
                  weights = ips_eb3$fitted.values[treatment == 0]) 
```

```{r}
perc_t-perc_c
perc_t-perc_c2
```
```{r}
m0 <- ewcdf(X[treatment == 1, 2])
m1 <- ewcdf(X[treatment == 0, 2], res_p$w)
m2 <- ewcdf(X[treatment == 0, 2], ips_eb3$fitted.values[treatment == 0])
plot(m0)
plot(m1, add = TRUE, col = "red")
plot(m2, add = TRUE, col = "blue")
```

